{"/home/travis/build/npmtest/node-npmtest-midi-launchpad/test.js":"/* istanbul instrument in package npmtest_midi_launchpad */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-midi-launchpad/lib.npmtest_midi_launchpad.js":"/* istanbul instrument in package npmtest_midi_launchpad */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_midi_launchpad = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_midi_launchpad = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-midi-launchpad/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-midi-launchpad && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_midi_launchpad */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_midi_launchpad\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_midi_launchpad.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_midi_launchpad.rollup.js'] =\n            local.assetsDict['/assets.npmtest_midi_launchpad.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_midi_launchpad.__dirname + '/lib.npmtest_midi_launchpad.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-midi-launchpad/node_modules/midi-launchpad/index.js":"module.exports = require('./launchpad');\n","/home/travis/build/npmtest/node-npmtest-midi-launchpad/node_modules/midi-launchpad/launchpad.js":"var _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\nvar Button = require(\"./button\").Button;\nvar LawrenceSans = require(\"./lawrencesans\").LawrenceSans;\nvar midi = require('midi');\n\n/*\n * Launchpad\n * Represents the launchpad as a whole\n */\nvar Launchpad = function(port, initAnimation) {\n    if (initAnimation === undefined) initAnimation = true;\n    var name = 0;\n    var row = 0;\n    var column = 0;\n    this.name = name;\n\n    this.row = row;\n    this.column = column;\n\n    _.extend(this, Backbone.Events);\n\n    // Some variables\n    this._grid = [];\n    var that = this;\n\n\n    this.specials = {\n        0:{ 8: [\"right\",\"vol\"] },\n        1:{ 8: [\"right\",\"pan\"] },\n        2:{ 8: [\"right\",\"snd A\"] },\n        3:{ 8: [\"right\",\"snd B\"] },\n        4:{ 8: [\"right\",\"stop\"] },\n        5:{ 8: [\"right\",\"trk on\"] },\n        6:{ 8: [\"right\",\"solo\"] },\n        7:{ 8: [\"right\",\"arm\"] },\n        8:{\n            0:[\"up\",\"page\"],\n            1:[\"down\",\"page\"],\n            2:[\"left\",\"page\"],\n            3:[\"right\",\"page\"],\n            4:[\"session\",\"inst\"],\n            5:[\"user 1\",\"fx\"],\n            6:[\"user 2\",\"user\"],\n            7:[\"mixer\",\"mixer\"],\n            8:null\n        }\n    };\n\n    this.createButtons = function() {\n        // Initialize all of the buttons\n        for(var y = 0; y < 9; y++) {\n            for(var x = 0; x < 9; x++) {\n                if (that._grid[x] === undefined) that._grid[x] = [];\n                that._grid[x][y] = new Button(that, x, y);\n                (function(x,y) {\n                    //that._grid[x][y].dark();\n                })(x,y);\n\n            }\n        }\n    };\n\n\n\n    /*\n     * Gets a button object from this._grid\n     */\n    this.getButton = function(x, y) {\n        if (y === undefined) {\n            y = Math.floor(x/16);\n            x = x % 16;\n        }\n\n        if (this._grid[x] === undefined || this._grid[x][y] === undefined) {\n            return undefined;\n        }\n\n        if(y !== undefined)\n            return this._grid[x][y];\n\n        var map = mapButtonToLaunchpad(x);\n        return this._grid[map[0]][map[1]];\n    };\n\n    /*\n     * Turns all LEDs off\n     */\n    this.allDark = function() {\n        // Reset the state on all buttons\n        for(var x = 0; x < 9; x++) {\n            for(var y = 0; y < 9; y++) {\n                this._grid[x][y].dark();\n            }\n        }\n    };\n\n    this.clear = this.allDark;\n\n    /*\n     * Turns all LEDs on\n     */\n    this.allLight = function(color) {\n        // Reset the state on all buttons\n        for(var x = 0; x < 9; x++) {\n            for(var y = 0; y < 9; y++) {\n                this._grid[x][y].light(color);\n            }\n        }\n    };\n\n    /*\n     * Event handler for button press\n     */\n    this.receiveMessage = function(deltaTime, msg) {\n        // We have to do something special for the top buttons\n        var button = that.getButton(msg[1]);\n        if(msg[0] == \"176\")\n            button = that.getButton(parseInt(msg[1],10) % 8, 8);\n\n\n        // On or off?\n        var state = (parseInt(msg[2], 10) == 127) ? true : false;\n\n        // Emit an event\n        if(state) {\n            button.trigger(\"press\",deltaTime);\n            button.trigger(\"state_change\");\n            this.trigger(\"press\", button);\n            if (button.special !== false) this.trigger(\"special_press\", button);\n\n        } else {\n            button.trigger(\"release\",deltaTime);\n            button.trigger(\"state_change\");\n            that.trigger(\"release\", button);\n            if (button.special !== false) that.trigger(\"special_release\", button);\n        }\n    };\n\n    this.randomColor = function() {\n        var options = [3, 48, 18, 49];\n        var rand = Math.floor(Math.random() * options.length);\n        return options[rand];\n    };\n\n    this.initialize = function() {\n        if (!initAnimation) {\n            // console.log(\"hi\");\n            // that.clear();\n            setTimeout(function() {\n                that.trigger(\"ready\", that);\n                that.ready = true;\n            },0);\n            return;\n        }\n\n\n        var colors = [\n            3, 48, 18, 49, 0\n        ];\n\n        for (var j = 0; j < colors.length;j++) {\n            var i = colors[j];\n            (function(i){\n                setTimeout(function() {\n                    for(var x = 0; x < 9; x++) {\n                        for(var y = 0; y < 9; y++) {\n                            (function(x,y){\n                                var t = setTimeout(function() {\n                                    try {\n                                        that._grid[x][y].light(i);\n                                        if (i === 0 && x === 8 && y === 8) {\n                                            that.trigger(\"ready\", that);\n                                            that.ready = true;\n                                        }\n                                    }\n                                    catch (e) {\n                                        console.log(x+\" \"+y);\n                                    }\n                                },(x+y)*100);\n                            })(x,y);\n                        }\n                    }\n                }, 500 * j);\n            })(i);\n        }\n    };\n\n\n    this.ready = false;\n    this.init = function() {\n            // Set up a new output.\n        this.output = new midi.output();\n        // Set up a new input.\n        this.input = new midi.input();\n\n        this.createButtons();\n\n        // Open the first available output port.\n        this.output.openPort(port);\n        this.input.openPort(port);\n\n        // Configure a callback.\n        this.input.on('message', function(deltaTime, message) {\n            that.receiveMessage(deltaTime, message);\n        });\n\n        console.log(\"running launchpad: \"+this.output.getPortName(port));\n\n        this.initialize();\n    };\n\n    console.log(\"setting up Launchpad on port:\"+port);\n    this.init();\n\n};\n\n\n\nLaunchpad.prototype.renderBytes = function(bytes, color) {\n    if (bytes === undefined) return;\n        for (var x = 0; x < bytes.length; x++) {\n        var byt = bytes[x];\n        for (var y = 0; y < byt.length; y++) {\n            if (!this._grid[y][x]) {\n                console.log(\"Button not found: x:\"+x+\", y:\"+y);\n                return;\n            }\n            byt[y] = byt[y].toLowerCase();\n            switch (byt[y]) {\n                case \"1\":\n                    this._grid[y][x].light(color);\n                    break;\n                case \"r\":\n                    this._grid[y][x].light(exports.colors.red.high);\n                    break;\n                case \"o\":\n                    this._grid[y][x].light(exports.colors.orange.high);\n                    break;\n                case \"y\":\n                    this._grid[y][x].light(exports.colors.yellow.high);\n                    break;\n                case \"g\":\n                    this._grid[y][x].light(exports.colors.green.high);\n                    break;\n                case \"0\":\n                    this._grid[y][x].light(exports.colors.off);\n                    break;\n            }\n        }\n    }\n};\n\nLaunchpad.prototype.displayCharacter = function(letter, color) {\n  var bytes = LawrenceSans(letter);\n  this.renderBytes(bytes, color);\n};\n\nLaunchpad.prototype.displayString = function(str, delay, callback, color) {\n  if (delay === undefined) delay = 500;\n  var that = this;\n  for (var j = 0; j < str.length; j++) {\n    (function(j){\n      setTimeout(function() {\n        that.displayCharacter(str[j], color);\n        if (j+1 === str.length && callback !== undefined) setTimeout(callback, delay);\n      }, j*delay);\n    })(j);\n  }\n};\n\nLaunchpad.prototype.scrollString = function(str,delay, color, onFinished) {\n    var bytes = [];\n    for(var i = 0; i < str.length; i++) {\n        bytes.push(LawrenceSans(str[i]));\n        bytes.push([\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]);\n    }\n    this.scrollBytes(bytes, delay, color, onFinished);\n}\n\nLaunchpad.prototype.colorize = function(bytes, colorStr, nullColorStr) {\n    for (var i = 0; i < bytes.length; i++) {\n        var str = \"\";\n        for (var j = 0; j < bytes[i].length; j++) {\n            if (bytes[i][j] === \"1\") str += colorStr;\n            else  str += nullColorStr;\n        }\n        bytes[i] = str;\n    }\n    return bytes;\n}\n\nLaunchpad.prototype.clearScroll = function() {\n    clearInterval(this.scrollInterval);\n}\n\nLaunchpad.prototype.scrollBytes = function(bytes, delay, color, onFinished) {\n    var perScreen = 8;\n    var charPos = 0;\n    var overallBytes = [];\n    for (var i= 0; i < bytes[0].length; i++) {\n        var toAdd = \"\";\n        for (var j = 0; j < bytes.length;j++) {\n            toAdd += bytes[j][i];\n        }\n        overallBytes.push(toAdd);\n    }\n\n    this.scrollInterval;\n    var that = this;\n\n    if (delay === undefined) delay = 200;\n\n    var visibleSet = function() {\n        var toReturn = [];\n        for (var i = 0; i < overallBytes.length; i++) {\n            toReturn[i] = new Array(perScreen);\n            var str = \"\";\n            for (var j = charPos; j < charPos+perScreen; j++) {\n                if (overallBytes[i][j] !== undefined)\n                    str += overallBytes[i][j];\n                else {\n                    clearInterval(interval);\n                    return;\n                }\n            }\n            toReturn[i] = str;\n        }\n        charPos++;\n        return toReturn;\n    };\n\n    interval = setInterval(function() {\n        var set = visibleSet();\n        if (set === undefined && typeof onFinished == \"function\") onFinished();\n        else\n            that.renderBytes(set, color);\n    }, delay);\n\n};\n\n\n\nexports.colors = Launchpad.prototype.colors = {\n    off: 0,\n    red: {\n        low: 1,\n        medium:2,\n        high:3\n    },\n    yellow: {\n        low: 17,\n        medium:34,\n        high:54\n    },\n    orange: {\n        low: 45,\n        medium:46,\n        high:23\n    },\n    green: {\n        low: 16,\n        medium:32,\n        high:48\n    }\n};\n\nexports.Launchpad = Launchpad;\n\nexports.connect = function(port, initAnimation) {\n    return new Launchpad(port, initAnimation);\n};","/home/travis/build/npmtest/node-npmtest-midi-launchpad/node_modules/midi-launchpad/button.js":"var _ = require(\"underscore\");\nvar Backbone = require(\"backbone\");\nvar Launchpad = require(\"./launchpad\");\n\n/*\n * Button\n * Represents a single button on the Launchpad\n */\nvar Button = function(launchpad, note, y) {\n    this.launchpad = launchpad;\n\n\n    _.extend(this, Backbone.Events);\n\n    this._grid = launchpad;\n    this._state = launchpad.LED_OFF;\n    var that = this;\n\n    this._uuid = [];\n\n    this.special = false;\n\n    // Are we being assigned via a note or x, y?\n    if(y === undefined) {\n        var map = mapButtonToLaunchpad(note);\n        this.x = map[0];\n        this.y = map[1];\n    } else {\n        this.x = note;\n        this.y = y;\n    }\n\n    if (launchpad.specials[this.y][this.x] !== undefined) {\n        this.special = launchpad.specials[this.y][this.x];\n    }\n\n    this.light = function(color) {\n        this.stopBlink();\n        if(color === undefined)\n            color = launchpad.colors.red.high;\n        if (this._state === color) return;\n\n        // Send the instruction to the launchpad\n        if(this.y === 8)\n            launchpad.output.sendMessage([176, this.toNote(), color]);\n        else\n            launchpad.output.sendMessage([144, this.toNote(), color]);\n\n        // Save the state\n        this._state = color;\n        this.trigger(\"state_change\");\n\n    };\n\n    this.setState = function(state) {\n        if (this._state === state) return;\n        // Send the instruction to the launchpad\n        if(this.y === 8)\n            launchpad.output.sendMessage([176, this.toNote(), state]);\n        else\n            launchpad.output.sendMessage([144, this.toNote(), state]);\n\n        // Save the state\n        this._state = state;\n        this.trigger(\"state_change\");\n    };\n\n    this.dark = function() {\n        if (this._state === Launchpad.colors.off) return;\n\n        if(this.y === 8)\n            launchpad.output.sendMessage([176, this.toNote(), Launchpad.colors.off]);\n        else\n            launchpad.output.sendMessage([144, this.toNote(), Launchpad.colors.off]);\n\n        this._state = Launchpad.colors.off;\n        this.trigger(\"state_change\");\n    };\n\n    // this.on(\"press\", function() {\n    //     launchpad.trigger(\"press\",that);\n    // });\n\n    // this.on(\"release\", function() {\n    //     launchpad.trigger(\"release\",that);\n    // });\n\n    // this.on(\"state_change\", function() {\n    //     launchpad.trigger(\"state_change\",that);\n    // });\n\n    this.startBlink = function(color) {\n        this._blink_color = color;\n        this._grid._blinking.push(this);\n\n        // If we're adding the first blinking LED, start the interval\n        if(this._grid._blinking.length == 1)\n            this._grid._blink_interval = setInterval(this._grid._tick, 500);\n        this.trigger(\"state_change\");\n    };\n\n    this.stopBlink = function() {\n        if (this._grid._blinking === undefined)\n            this._grid._blinking = [];\n        var index = this._grid._blinking.indexOf(this);\n        if(index === -1)\n            return;\n\n        delete this._blink_color;\n        this._grid._blinking.splice(index, 1);\n        this.trigger(\"state_change\");\n    };\n\n    this.getState = function() {\n        return this._state;\n    };\n\n    // Converts x,y -> MIDI note\n    this.toNote = function() {\n        if(this.y == 8)\n            return 104 + this.x;\n        else\n            return (this.y * 16) + this.x;\n    };\n    this.toString = function() {\n        return \"(\" + this.x + \", \" + this.y + \")\";\n    }\n};\n\nvar mapButtonToLaunchpad = function (note) {\n    // For right buttons\n    if(note % 8 === 0 && ((note / 8) % 2 == 1))\n        return [8, Math.floor(note / 8 / 2)];\n\n    var x = note % 8;\n    var y = Math.floor(note / 8) / 2;\n    return [x, y];\n};\n\nexports.Button = Button;\n","/home/travis/build/npmtest/node-npmtest-midi-launchpad/node_modules/midi-launchpad/lawrencesans.js":"LawrenceSans = function(character) {\n    character = character.toLowerCase();\n    if (character == '1') {\n        return [\n                \"00001000\",\n                \"00011000\",\n                \"00101000\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"11111111\"];\n    }\n    if (character == '2') {\n        return [\n                \"00011110\",\n                \"00100001\",\n                \"01000001\",\n                \"00000110\",\n                \"00011000\",\n                \"00100000\",\n                \"01000000\",\n                \"11111111\"];\n    }\n    if (character == '3') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"00000001\",\n                \"11111110\",\n                \"00000001\",\n                \"00000001\",\n                \"10000001\",\n                \"01111110\"];\n    }\n    if (character == '4') {\n        return [\n                \"00000100\",\n                \"00001100\",\n                \"00010100\",\n                \"00100100\",\n                \"01000100\",\n                \"11111111\",\n                \"00000100\",\n                \"00000100\"];\n    }\n    if (character == '5') {\n        return [\n                \"11111111\",\n                \"10000000\",\n                \"10000000\",\n                \"11111100\",\n                \"00000010\",\n                \"00000001\",\n                \"00000010\",\n                \"11111100\"];\n    }\n    if (character == '6') {\n        return [\n                \"00000010\",\n                \"00001100\",\n                \"00110000\",\n                \"01000000\",\n                \"11111110\",\n                \"10000001\",\n                \"10000001\",\n                \"01111110\"];\n    }\n    if (character == '7') {\n        return [\n                \"11111111\",\n                \"00000010\",\n                \"00000100\",\n                \"00001000\",\n                \"00010000\",\n                \"00100000\",\n                \"01000000\",\n                \"10000000\"];\n    }\n    if (character == '8') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"01111110\"];\n    }\n    if (character == '9') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"01111111\",\n                \"00000001\",\n                \"00000010\",\n                \"00000100\",\n                \"00011000\"];\n    }\n    if (character == '0') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"10011001\",\n                \"10011001\",\n                \"10000001\",\n                \"10000001\",\n                \"01111110\"];\n    }\n    if (character == 'a') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"11111111\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\"];\n    }\n    if (character == 'b') {\n        return [\n                \"11111110\",\n                \"10000001\",\n                \"10000001\",\n                \"11111111\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"11111111\"];\n    }\n    if (character == 'c') {\n        return [\n                \"01111111\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"01111111\"];\n    }\n    if (character == 'd') {\n        return [\n                \"11111100\",\n                \"10000010\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000010\",\n                \"11111100\"];\n    }\n    if (character == 'e') {\n        return [\n                \"11111111\",\n                \"10000000\",\n                \"10000000\",\n                \"11111111\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"11111111\"];\n    }\n    if (character == 'f') {\n        return [\n                \"01111111\",\n                \"10000000\",\n                \"10000000\",\n                \"11111111\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\"];\n    }\n    if (character == 'g') {\n        return [\n                \"01111111\",\n                \"10000000\",\n                \"10000000\",\n                \"10011111\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"01111110\"];\n    }\n    if (character == 'h') {\n        return [\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"11111111\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\"];\n    }\n    if (character == 'i') {\n        return [\n                \"11111111\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"11111111\"];\n    }\n    if (character == 'j') {\n        return [\n                \"11111111\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"11110000\"];\n    }\n    if (character == 'k') {\n        return [\n                \"10000001\",\n                \"10000010\",\n                \"10000100\",\n                \"10000100\",\n                \"11111000\",\n                \"10001000\",\n                \"10000110\",\n                \"10000001\"];\n    }\n    if (character == 'l') {\n        return [\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"11111111\"];\n    }\n    if (character == 'm') {\n        return [\n                \"10000001\",\n                \"11000011\",\n                \"10100101\",\n                \"10011001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\"];\n    }\n    if (character == 'n') {\n        return [\n                \"10000001\",\n                \"11000001\",\n                \"10100001\",\n                \"10010001\",\n                \"10001001\",\n                \"10000101\",\n                \"10000011\",\n                \"10000001\"];\n    }\n    if (character == 'o') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"01111110\"];\n    }\n    if (character == 'p') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"11111110\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\"];\n    }\n    if (character == 'q') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10001001\",\n                \"10000101\",\n                \"10000011\",\n                \"01111111\"];\n    }\n    if (character == 'r') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"11111110\",\n                \"11000000\",\n                \"10110000\",\n                \"10001100\",\n                \"10000011\"];\n    }\n    if (character == 's') {\n        return [\n                \"01111111\",\n                \"10000000\",\n                \"10000000\",\n                \"01111110\",\n                \"00000001\",\n                \"00000001\",\n                \"00000001\",\n                \"11111110\"];\n    }\n    if (character == 't') {\n        return [\n                \"11111111\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\"];\n    }\n    if (character == 'u') {\n        return [\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"01111110\"];\n    }\n    if (character == 'v') {\n        return [\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"01000010\",\n                \"00100100\",\n                \"00011000\"];\n    }\n    if (character == 'w') {\n        return [\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10000001\",\n                \"10011001\",\n                \"10100101\",\n                \"11000011\",\n                \"10000001\"];\n    }\n    if (character == 'x') {\n        return [\n                \"10000001\",\n                \"01000010\",\n                \"00100100\",\n                \"00011000\",\n                \"00011000\",\n                \"00100100\",\n                \"01000010\",\n                \"10000001\"];\n    }\n    if (character == 'y') {\n        return [\n                \"10000001\",\n                \"01000010\",\n                \"00100100\",\n                \"00011000\",\n                \"00010000\",\n                \"00100000\",\n                \"01000000\",\n                \"10000000\"];\n    }\n    if (character == 'z') {\n        return [\n                \"11111111\",\n                \"00000010\",\n                \"00000100\",\n                \"00001000\",\n                \"00010000\",\n                \"00100000\",\n                \"01000000\",\n                \"11111111\"];\n    }\n    if (character == '.') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"11000000\",\n                \"11000000\"];\n    }\n    if (character == ',') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"01000000\",\n                \"10000000\"];\n    }\n    if (character == '!') {\n        return [\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"00001000\",\n                \"00000000\",\n                \"00000000\",\n                \"00001000\"];\n    }\n    if (character == '#') {\n        return [\n                \"00100100\",\n                \"00100100\",\n                \"11111111\",\n                \"00100100\",\n                \"00100100\",\n                \"11111111\",\n                \"00100100\",\n                \"00100100\"];\n    }\n    if (character == '@') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10011001\",\n                \"10100101\",\n                \"10100101\",\n                \"10011110\",\n                \"10000000\",\n                \"01111111\"];\n    }\n    if (character == ':') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"10000000\",\n                \"10000000\",\n                \"00000000\",\n                \"00000000\",\n                \"10000000\",\n                \"10000000\"];\n    }\n    if (character == '/') {\n        return [\n                \"00000001\",\n                \"00000010\",\n                \"00000100\",\n                \"00001000\",\n                \"00010000\",\n                \"00100000\",\n                \"01000000\",\n                \"10000000\"];\n    }\n    if (character == ';') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"01000000\",\n                \"01000000\",\n                \"00000000\",\n                \"01000000\",\n                \"10000000\"];\n    }\n    if (character == '>') {\n        return [\n                \"11000000\",\n                \"00110000\",\n                \"00001100\",\n                \"00000011\",\n                \"00000011\",\n                \"00001100\",\n                \"00110000\",\n                \"11000000\"];\n    }\n    if (character == '<') {\n        return [\n                \"00000011\",\n                \"00001100\",\n                \"00110000\",\n                \"11000000\",\n                \"11000000\",\n                \"00110000\",\n                \"00001100\",\n                \"00000011\"];\n    }\n    if (character == '~') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"01100000\",\n                \"10011001\",\n                \"00000110\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '-') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"11111111\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '—') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"11111111\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '_') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"11111111\"];\n    }\n    if (character == '+') {\n        return [\n                \"00011000\",\n                \"00011000\",\n                \"00011000\",\n                \"11111111\",\n                \"11111111\",\n                \"00011000\",\n                \"00011000\",\n                \"00011000\"];\n    }\n    if (character == '=') {\n        return [\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"11111111\",\n                \"00000000\",\n                \"11111111\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '(') {\n        return [\n                \"00100000\",\n                \"01000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"01000000\",\n                \"00100000\"];\n    }\n    if (character == ')') {\n        return [\n                \"00000100\",\n                \"00000010\",\n                \"00000001\",\n                \"00000001\",\n                \"00000001\",\n                \"00000001\",\n                \"00000010\",\n                \"00000100\"];\n    }\n    if (character == '[') {\n        return [\n                \"11110000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"10000000\",\n                \"11110000\"];\n    }\n    if (character == '\"') {\n        return [\n                \"00001111\",\n                \"00000001\",\n                \"00000001\",\n                \"00000001\",\n                \"00000001\",\n                \"00000001\",\n                \"00000001\",\n                \"00001111\"];\n    }\n\n    if (character == '\"') {\n        return [\n                \"01100110\",\n                \"01100110\",\n                \"01100110\",\n                \"10001000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n\n    if (character == '“') {\n        return [\n                \"00100001\",\n                \"11000110\",\n                \"11000110\",\n                \"11000110\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n\n\n    if (character == '”') {\n        return [\n                \"01100110\",\n                \"01100110\",\n                \"01100110\",\n                \"10001000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '\\'') {\n        return [\n                \"01100000\",\n                \"01100000\",\n                \"01100000\",\n                \"10000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '?') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10000001\",\n                \"00000110\",\n                \"00001000\",\n                \"00010000\",\n                \"00000000\",\n                \"00010000\"];\n    }\n    if (character == '‽') {\n        return [\n                \"01111110\",\n                \"10000001\",\n                \"10010001\",\n                \"00010110\",\n                \"00011000\",\n                \"00010000\",\n                \"00000000\",\n                \"00010000\"];\n    }\n\n    if (character == '£') {\n        return [\n                \"00011111\",\n                \"00100000\",\n                \"00100000\",\n                \"00100000\",\n                \"11111111\",\n                \"00100000\",\n                \"01000000\",\n                \"11111111\"];\n    }\n    if (character == '&') {\n        return [\n                \"01111000\",\n                \"10000000\",\n                \"01000000\",\n                \"00100000\",\n                \"01010001\",\n                \"10001010\",\n                \"10000100\",\n                \"01111010\"];\n    }\n\n    if (character == '{') {\n        return [\n                \"00110000\",\n                \"01000000\",\n                \"01000000\",\n                \"10000000\",\n                \"01000000\",\n                \"01000000\",\n                \"01000000\",\n                \"00110000\"];\n    }\n    if (character == '}') {\n        return [\n                \"00001100\",\n                \"00000010\",\n                \"00000010\",\n                \"00000001\",\n                \"00000010\",\n                \"00000010\",\n                \"00000010\",\n                \"00001100\"];\n    }\n    if (character == '%') {\n        return [\n                \"00100000\",\n                \"01010010\",\n                \"00100100\",\n                \"00001000\",\n                \"00010000\",\n                \"00100100\",\n                \"01001010\",\n                \"00000100\"];\n    }\n    if (character == '^') {\n        return [\n                \"00011000\",\n                \"00100100\",\n                \"01000010\",\n                \"10000001\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '*') {\n        return [\n                \"01010100\",\n                \"00111000\",\n                \"01111100\",\n                \"00111000\",\n                \"01010100\",\n                \"00000000\",\n                \"00000000\",\n                \"00000000\"];\n    }\n    if (character == '\\\\') {\n        return [\n                \"10000000\",\n                \"01000000\",\n                \"00100000\",\n                \"00010000\",\n                \"00001000\",\n                \"00000100\",\n                \"00000010\",\n                \"00000001\"];\n    }\n    if (character == '|') {\n        return [\n                \"00100000\",\n                \"00100000\",\n                \"00100000\",\n                \"00100000\",\n                \"00100000\",\n                \"00100000\",\n                \"00100000\",\n                \"00100000\"];\n    }\n    if (character == '€') {\n        return [\n                \"00111110\",\n                \"01000001\",\n                \"01000000\",\n                \"11111000\",\n                \"01000000\",\n                \"11111000\",\n                \"01000001\",\n                \"00111110\"];\n    }\n    if (character == '$') {\n        return [\n            \"00010000\",\n            \"01111111\",\n            \"10010000\",\n            \"10010000\",\n            \"01111110\",\n            \"00010001\",\n            \"11111110\",\n            \"00010000\"];\n    }\n    if (character == '¥') {\n        return [\n            \"10000001\",\n            \"01000010\",\n            \"00100100\",\n            \"00011000\",\n            \"11111111\",\n            \"00011000\",\n            \"00011000\",\n            \"00011000\"];\n    }\n    if (character == '•') {\n        return [\n            \"00000000\",\n            \"00000000\",\n            \"00011000\",\n            \"00111100\",\n            \"00111100\",\n            \"00011000\",\n            \"00000000\",\n            \"00000000\"];\n    }\n    if (character == ' ') {\n        return [\n            \"00000000\",\n            \"00000000\",\n            \"00000000\",\n            \"00000000\",\n            \"00000000\",\n            \"00000000\",\n            \"00000000\",\n            \"00000000\"];\n    }\n\n    return [\n        \"01111110\",\n        \"10000001\",\n        \"10010001\",\n        \"00010110\",\n        \"00011000\",\n        \"00010000\",\n        \"00000000\",\n        \"00010000\"\n    ];\n};\n\nexports.LawrenceSans = LawrenceSans;"}